# This script adds autocompletion for cbuild script
# Place it under /etc/bash_completion.d/
# Change path in source command

# TODO:
# 1. Fix suggestion of arguments for -p, -v
# 2. Use already inserted projects with -p -e
# 3. Do not suggest projects if range option have both arguments
# 4. Do not use already used projects with -l -r ...
# 5. Suggest only downstream projects for the second arg of -r
# 6. Do not suggest project name as thrird argument for the range options

_cbuild()
{
    # change it
    source "${PATH_TO_CBUILD_LIBRARY_FOLDER}/projectsList.sh"

    # empty suggesstion at start
    COMPREPLY=()

    # list of all options at 1st level
    # build
    commands=( --t --notests --o --fu --clean-local-repo --prl --nb --no-build --nobuild --skip-sources-validation --no-clean --gwt-closure-disable)
    # vcs
    commands+=( --pu --no-pull --no-fetch --lc -lc -b -bs -bh -bf -maven-additional-params -build-param -bparam )
    commands+=( --deployment-b -deployment-b --deployment-pu --deployment-no-pull --skip-git-operations )
    # projects list
    commands+=( --r -r -r-sdk -r-hosted -l -p -e --r-sdk --r-hosted -continue-from -continue-after )
    # deploy
    commands+=( -v --v -upload --che )
    # additional options
    commands+=( --help -help -h --dry --log --q --default-disable )

    # vagrant subcommands
    vagrant_commands="--d --destroy --dp"

    # evaluate commands that should not be available in autocomplete
    # -p, -e commands can be used multiple times
    local NOT_AVAILABLE_COMMANDS=()
    for ((i=1; i<=${#COMP_WORDS[@]}; ++i)); do
        if [[ ${COMP_CWORD} == ${i} ]]; then
            # skip current word because it can be part of another variant that will be unwillingly excluded from commands
            continue;
        fi
        case ${COMP_WORDS[${i}]} in
            --o | --fu | --dry | -upload | --clean-local-repo | --prl | --che | --log | --q | --skip-sources-validation | --no-clean | --default-disable | --gwt-closure-disable)
                NOT_AVAILABLE_COMMANDS+=(${COMP_WORDS[${i}]})
                ;;
            -build-param | -bparam | -maven-additional-params)
                NOT_AVAILABLE_COMMANDS+=("-build-param" "-bparam" "-maven-additional-params")
                ;;
            -l | -r | --r | -r-hosted | -r-sdk | --r-hosted | --r-sdk)
                NOT_AVAILABLE_COMMANDS+=("-l" "-r" "--r" "-r-hosted" "-r-sdk" "--r-hosted" "--r-sdk")
                ;;
            --t | --notests)
                NOT_AVAILABLE_COMMANDS+=("--t" "--notests")
                ;;
            --pu | --no-pull)
                NOT_AVAILABLE_COMMANDS+=("--pu" "--no-pull")
                ;;
            --lc | -lc)
                NOT_AVAILABLE_COMMANDS+=("--lc" "-lc")
                ;;
            -continue-from | -continue-after)
                NOT_AVAILABLE_COMMANDS+=("-continue-from" "-continue-after")
                ;;
            --v | -v)
                NOT_AVAILABLE_COMMANDS+=("--v" "-v")
                ;;
            --nb | --no-build | --nobuild)
                NOT_AVAILABLE_COMMANDS+=("--nb" "--no-build" "--nobuild")
                ;;
            -b | -bs | -bh | -bf)
                NOT_AVAILABLE_COMMANDS+=("-b" "-bs" "-bh" "-bf")
                ;;
            --help | -h | -help)
                COMPREPLY=()
                return 0;
                ;;
            --deployment-b | -deployment-b)
                NOT_AVAILABLE_COMMANDS+=("--deployment-b" "-deployment-b")
                ;;
            --deployment-pu | --deployment-no-pull)
                NOT_AVAILABLE_COMMANDS+=("--deployment-pu" "--deployment-no-pull")
                ;;
            --no-fetch)
                NOT_AVAILABLE_COMMANDS+=("--no-fetch")
                ;;
            --skip-git-operations)
                NOT_AVAILABLE_COMMANDS+=("--skip-git-operations" "--lc" "-lc" "--pu" "--no-pull" "-b" "-bs" "-bh" "-bf" "--no-fetch")
                ;;
            *)
                _log
                ;;
        esac
    done

    for commandToRemove in ${NOT_AVAILABLE_COMMANDS[@]}; do
        local removeIndex=$(_getIndexInArray ${commandToRemove} ${commands[@]})
        if [ ${removeIndex} != -1 ]; then
            commands=(${commands[@]:0:${removeIndex}} ${commands[@]:$((${removeIndex} + 1))})
        fi
    done
    commands=$(echo ${commands[@]})

    # get current argument
    cur=${COMP_WORDS[COMP_CWORD]}

    # get suggestion for first command or commands that follows after command with 2 dashes
    if [[ ${COMP_CWORD} == 1 || ${COMP_WORDS[COMP_CWORD-1]} == --* ]]; then
        COMPREPLY=( $(compgen -W "${commands}" -- ${cur}) )
        return 0
    else
        # command does not follow command that starts from 2 dashes and isn't a first command
        # check that previous command starts from dash
        if [[ ${COMP_WORDS[COMP_CWORD-1]} == -* ]]; then
            # choose previous command
            case "${COMP_WORDS[COMP_CWORD-1]}" in
                -r-sdk)
                    _generate_list_of_propjects "sdk"
                    return 0
                    ;;
                -r-hosted)
                    _generate_list_of_propjects "hosted"
                    return 0
                    ;;

                -l | -e | -r | -p | -continue-from | -continue-after)
                    _generate_list_of_propjects "all"
                    return 0
                    ;;
                -v)
                    COMPREPLY=( $(compgen -W "${vagrant_commands}" -- ${cur}) )
                    return 0
                    ;;
                -deployment-b | -upload | -b | -bs | -bh | -bf | -lc | -maven-additional-params | -build-param | -bparam )
                    # can't guess
                    COMPREPLY=()
                    return 0
                    ;;
                *)
                    # Unknown syntax
                    _log
                    COMPREPLY=()
                    return 0
                    ;;
            esac
        else
            # previous command doesn't start from dash
            # iterate through all previous commands in revers order
            # to find the command current argument can belong to
            for (( idx=COMP_CWORD-2 ; idx>=0 ; idx-- )) ; do
                # current argument can be name of the project or command
                case ${COMP_WORDS[idx]} in
                    -l | -e)
                        _generate_list_of_propjects "all"
                        COMPREPLY+=( $(compgen -W "${commands}" -- ${cur}) )
                        return 0
                        ;;
                    -r | -r-sdk | -r-hosted)
                        if (( ${COMP_CWORD} - 2 == ${idx} )); then
                            if [ ${COMP_WORDS[idx]} == "-r" ]; then
                                local scope="all"
                            else
                                local scope="${COMP_WORDS[idx]:3}"
                            fi
                            _generate_list_of_propjects ${scope}
                        else
                            COMPREPLY=( $(compgen -W "${commands}" -- ${cur}) )
                        fi
                        return 0
                        ;;
                    -v)
                        # return vagrant script options
                        COMPREPLY=( $(compgen -W "${vagrant_commands}" -- ${cur}) )
                        return 0
                        ;;
                    -b | -bs | -bh | -lc | -p | -maven-additional-params | -deployment-b | -continue-from | -continue-after)
                        if (( ${COMP_CWORD} - 2 == ${idx} )); then
                            COMPREPLY=( $(compgen -W "${commands}" -- ${cur}) )
                        else
                            COMPREPLY=()
                        fi
                        return 0
                        ;;
                    -bf)
                        if (( ${COMP_CWORD} - 3 == ${idx} )); then
                            COMPREPLY=( $(compgen -W "${commands}" -- ${cur}) )
                        else
                            # can't guess
                            COMPREPLY=()
                        fi
                        return 0
                        ;;
                    -upload)
                        if [[ $((${#COMP_WORDS[@]}-${idx})) -ge 3 ]]; then
                            COMPREPLY=( $(compgen -W "${commands}" -- ${cur}) )
                            return 0;
                        fi
                        return 0
                        ;;
                    *)
                        _log
                        if [[ ${COMP_WORDS[idx]} == -* ]]; then
                            return 0
                        fi
                        ;;
                esac
            done
        fi
    fi
}

# sets projects in completion variable
_generate_list_of_propjects() {
    case ${1} in
        all)
            PROJECTS=${ALL_PROJECTS[@]}
            ;;
        sdk)
            PROJECTS=${IDE_SDK_PROJECTS[@]}
            ;;
        hosted)
            PROJECTS=${IDE_HOSTED_PROJECTS[@]}
            ;;
        *)
            exit 1
    esac
    COMPREPLY=( $(compgen -W "`echo ${PROJECTS[@]}`" -- ${cur}) )
}

_getIndexInArray() {
    local str=$1; shift
    local array=( $( echo $@ ) )
    for (( i=0; i<${#array[*]}; i++ )); do
        [ ${array[$i]} == ${str} ] && echo ${i} && return 0
    done
    echo "-1" && return 0
}

_log() {
    mkdir -p /tmp/cbuild
    echo "$(date) ${COMP_WORDS[@]}" "${COMP_CWORD}" "${COMP_WORDS[COMP_CWORD]}" >> /tmp/cbuild/cbuild_autocompletion.log
}

complete -F _cbuild cbuild
